autoplot(energy) +
labs(title = "", subtitle = "")
# dividir TRAIN - TEST
df_demanda_train = df_demanda[df_demanda$date < '2020-06-01',]
df_demanda_test = df_demanda[df_demanda$date >= '2020-06-01',]
# Transform into a tibble object
df_demanda_train <- df_demanda_train %>%
as_tsibble(index = date) #key = c(energy), index = datetime
df_demanda_test <- df_demanda_test %>%
as_tsibble(index = date) #key = c(energy), index = datetime# Descomposición clásica
# plot series temporales
df_demanda_train %>%
autoplot(energy) +
labs(title = "", subtitle = "")
#aditivo
df_demanda_train %>%
model(classical_decomposition(energy, type = "additive")) %>%
components() %>%
autoplot() + xlab(" ") +
ggtitle(" ")
# plot series temporales
df_demanda_train %>%
autoplot(energy) +
labs(title = "", subtitle = "")
#Comprobar si existen autocorrelaciones significaticas:
df_demanda_train %>%
mutate(diff_close = difference(energy)) %>%
features(diff_close, ljung_box, lag = 10)
# MODELOS
# es posible utilizar las gráfica de ACF y PACF, para determinar los valores apropiados para p y q.
# Correlograma
# Gráfico en el que representamos los valores de la función de autocorrelación empírica r k contra los retardos k = 1, 2, ... , M donde típicamente M ≪ N .
# Vemos que  tiene muchos componentes significativas para algún retardo.
df_demanda_train %>% ACF(difference(energy, 7)) %>% autoplot()
# correlación que resulta después de eliminar el efecto de cualquier correlación en retardos más cortos
# autocorrelación entre los instantes t y t + k condicionada a  los valores que toma la serie en los instantes t + 1, t + 2, ... , t + k − 1 .
df_demanda_train %>% PACF(difference(energy, 7)) %>% autoplot()
df_demanda1_diff <- difference(df_demanda_train$energy, 7)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
coeftest(model1)
# Residuals
checkresiduals(model1)
# Forecast
autoplot(forecast(model1))
# test data
fit2 <- Arima(df_demanda_test$energy, model = model1)
# Plot fitted values
plot(fitted(model1))
lines(fitted(fit2), col = "blue")
View(df_demanda_test)
View(df_demanda_train)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS", xreg = df_demanda_train$date)
# test data
fit2 <- Arima(df_demanda_test$energy, model = model1)
prediccion = forecast(fit2, h = 50)
# Plot forecast
plot(fitted(model1))
lines(prediccion, col = "blue") #fitted(fit2)
lines(fitted(prediccion), col = "blue") #fitted(fit2)
# Plot forecast
plot(ts(model1))
plot(df_demanda_train$energy)
plot(df_demanda_train$energy, type = l)
plot(df_demanda_train$energy, type = 'l')
lines(prediccion, col = "blue") #fitted(fit2)
lines(fitted(prediccion), col = "blue") #fitted(fit2)
# test data
fit2 <- auto.arima(df_demanda_test$energy, model = model1)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
coeftest(model1)
# Residuals
checkresiduals(model1)
# test data
fit2 <- auto.arima(df_demanda_test$energy, model = model1)
prediccion = forecast(fit2, h = 50)
plot(df_demanda_train$energy, type = 'l')
# test data
fit2 <- auto.arima(df_demanda_test$energy, model = model1, method="CSS")
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima(df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
coeftest(model1)
# Residuals
checkresiduals(model1)
# test data
fit2 <- auto.arima(df_demanda_test$energy, model = model1)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model_auto = auto.arima(df_demanda_train$energy)
model1
model_auto
# test data
# fit2 <- Arima(df_demanda_test$energy, model = model1)
prediccion = forecast(model_auto, h = 50)
plot(prediccion)
lines((model_auto,df_demanda_test$energy)
lines(df_demanda_test$energy)
plot(prediccion)
lines(df_demanda_test$energy)
df_demanda <- df_demanda %>%
as_tsibble(index = date) #key = c(energy), index = datetime# Descomposición clásica
lines(df_demanda$energy)
plot(prediccion)
lines(df_demanda$energy)
# test data
# fit2 <- Arima(df_demanda_test$energy, model = model1)
prediccion = forecast(model_auto,df_demanda_test$energy)
plot(prediccion)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
coeftest(model1)
model_auto = auto.arima(df_demanda_train$energy)
model_auto
# Residuals
checkresiduals(model1)
# test data
# fit2 <- Arima(df_demanda_test$energy, model = model1)
prediccion = forecast(model_auto,df_demanda_test$energy) #, h = 50
plot(prediccion)
#serie original
lines(df_demanda$energy)
summary(model_auto)
# test data
fit2 <- Arima(df_demanda_test$energy, model = model_auto)
prediccion = forecast(model_auto,df_demanda_test$energy, h = 50) #
plot(prediccion)
# ARIMA
#Ver qué parámetros añadir p, d, q
# componente no estacional: 2 (con diferenciación)
# componente estacional: 7 (con diferenciación)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
coeftest(model1)
model_auto = auto.arima(df_demanda_train$energy)
model_auto
summary(model_auto)
# Residuals
checkresiduals(model1)
# test data
fit2 <- Arima(df_demanda_test$energy, model = model_auto)
prediccion = forecast(model_auto,df_demanda_test$energy, h = 50) #
prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
plot(prediccion)
#serie original
lines(df_demanda$energy)
View(fit2)
# Plot forecast
plot(fitted(model1))
lines(fitted(prediccion), col = "blue") #fitted(fit2)
prediccion = forecast(fit2, h = 50)
fit2 <- Arima(df_demanda_test$energy, model = model_auto)
prediccion = forecast(fit2, h = 50)
# Plot forecast
plot(fitted(model_auto))
lines(fitted(prediccion), col = "blue") #fitted(fit2)
prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
plot(prediccion,col="blue")
#serie original
lines(df_demanda$energy, col = "red")
# test data
fit2 <- Arima(df_demanda_test$energy, model = model_auto)
prediccion = forecast(fit2, h = 50)
# Plot forecast
plot(fitted(model_auto),col="blue")
lines(fitted(prediccion), col = "red") #fitted(fit2)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
years20<-predict(model1,n.ahead=240)
years20_pred<-predict(model1,n.ahead=240)$pred
years20_se<-predict(model1,n.ahead=240)$se
plot(df_demanda_train$energy,xlim=c(1700,2015),col="grey",lwd=1.5,ylab="sunspots")
lines(years20$pred, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots")
lines(years20$pred, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l')
lines(years20$pred, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l',xlim=c(0,700))
lines(years20$pred, col="green",lwd=1.5)
View(years20)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
lines(years20$pred, col="green",lwd=1.5)
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
years20<-predict(model1)
years20_pred<-predict(model1)$pred
years20_se<-predict(model1)$se
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
lines(years20$pred, col="green",lwd=1.5)
View(years20)
lines(years20$pred, col="blue",lwd=1.5)
years20_pred<-predict(model1, n.ahead = 240)$pred
years20_se<-predict(model1)$se
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
lines(years20$pred, col="blue",lwd=1.5)
lines(years20$pred, col="blue",lwd=1.5)
plot(years20$pred, col="blue",lwd=1.5)
View(years20)
years20_pred<-predict(model1, n.ahead = 10)$pred
years20_se<-predict(model1)$se
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
plot(years20$pred, col="blue",lwd=1.5)
plot(years20_pred, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
plot(years20_pred, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
lines(years20_pred, col="blue",lwd=1.5)
lines(years20_pred, col="blue",lwd=1.5)
plot(years20_pred, col="blue",lwd=1.5)
years20_pred<-predict(model1, n.ahead = 300)$pred
years20_se<-predict(model1)$se
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
plot(years20_pred, col="blue",lwd=1.5)
# 2
fit2 <- df_demanda_train %>%
model(arima = ARIMA(energy ~ pdq(6,0,0) + PDQ(0,0,0)))
years20_pred<-predict(auto_model, n.ahead = 300)$pred
years20_se<-predict(model1)$se
years20_pred<-predict(model_auto, n.ahead = 300)$pred
years20_se<-predict(model1)$se
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
plot(years20_pred, col="blue",lwd=1.5)
lines(years20_pred, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="sunspots", type = 'l', xlim=c(0,700))
lines(years20_pred, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
# Representar serie + predicción (modelo auto)
prediction_auto<-predict(model_auto, n.ahead = 300)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
# MODELO AJUSTADO AUTOMÁTICAMENTE ---------------------------------------------------------------------------------------------------
model_auto = auto.arima(df_demanda_train$energy)
model_auto
summary(model_auto)
prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
plot(prediccion,col="blue")
#serie original
lines(df_demanda$energy, col = "green")
# Plot forecast
plot(fitted(model_auto),col="blue")
lines(fitted(prediccion), col = "green") #fitted(fit2)
# Representar serie + predicción data test (modelo auto)
prediction_auto<-predict(model_auto, n.ahead = 300)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
lines(df_demanda_test$energy, col="green",lwd=1.5)
prediction_auto
ts(df_demanda_test$energy)
lines(a, col="green",lwd=1.5)
a = ts(df_demanda_test$energy)
lines(a, col="green",lwd=1.5)
a = ts(df_demandat$energy[519:818])
a = ts(df_demanda$energy[519:818])
lines(a, col="green",lwd=1.5)
a
a = ts(df_demanda_test$energy, start = 519, end = 818)
lines(a, col="green",lwd=1.5)
a = ts(df_demanda_test$energy, start = 519, end = 818, frequency= 1)
lines(a, col="green",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-predict(model_auto, n.ahead = 300)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-predict(model_auto, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-predict(model_auto, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,700))
lines(prediction_auto, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,550))
lines(prediction_auto, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,530))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,520))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,525))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,530))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,525))
lines(prediction_auto, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,527))
lines(prediction_auto, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,528))
lines(prediction_auto, col="blue",lwd=1.5)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_auto, col="blue",lwd=1.5)
lines(a, col="green",lwd=1.5)
# SARIMA ---------------------------------------------------------------------------------------------------------------------------------
fit <- df_demanda_train %>%
model(arima = ARIMA(energy ~ pdq(0,1,1) + PDQ(0,1,1)))
#predicción
fit %>% forecast(h=12) %>% autoplot(df_demanda_train)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Residuals
checkresiduals(model1)
# errores
checkresiduals(prediction_auto)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_auto, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima (df_demanda_train$energy,  order = c (2,7,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_auto, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (2,7,0))
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-forecast(model1, n.ahead = 30)$pred
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_auto<-forecast(model1, h = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_auto, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima (df_demanda_train$energy,  order = c (2,1,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima (df_demanda_train$energy,  order = c (2,5,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-forecast(model1, h= 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# Residuals
checkresiduals(model1)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = arima(df_demanda_train$energy,  order = c (2,5,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 100)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (2,5,0), method="CSS")
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 100)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 1600)$pred
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 600)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 600)
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
View(prediction_model1)
View(prediction_model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 600)$pred
prediction_model1
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (2,1,0), method="CSS")
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (2,1,0))
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (2,1,0)) #, method="CSS"
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# Residuals
checkresiduals(model1)
# MODELO AJUSTADO MANUALMENTE ---------------------------------------------------------------------------------------------------------
model1 = Arima(df_demanda_train$energy,  order = c (5,1,0)) #, method="CSS"
model1
summary(model1)
coeftest(model1)
# Raíces complejas dentro del círculo
# Se puede comprobar que las tres raices de la parte autoregresiva están dentro del círculo unidad, por tanto el proceso es estacionario.
gg_arma(model1)
# Representar serie + predicción data test (modelo auto)
#prediccion = forecast(model_auto, h = 50) #df_demanda_test$energy,
prediction_model1<-predict(model1, n.ahead = 30)$pred
plot(df_demanda_train$energy,col="grey",lwd=1.5,ylab="Demanda energética train + forecast", type = 'l', xlim=c(0,529))
lines(prediction_model1, col="blue",lwd=1.5)
time_series_test = ts(df_demanda_test$energy, start = 519, end = 549)
lines(time_series_test, col="green",lwd=1.5)
# Residuals
checkresiduals(model1)
checkresiduals(prediction_model1)
